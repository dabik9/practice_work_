import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import Message
import sqlite3
import hashlib
from datetime import datetime, timedelta

drop_users_list = []

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="7014679556:AAGPqYwhEIQ7jD7uhidFQg4GwfV2pCEOo88")
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('New db education.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()
    waiting_for_full_name = State()
    waiting_for_group = State()
    waiting_for_student_id = State()

class MessageState(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_message_text = State()
    waiting_for_confirmation = State()

class KnowledgeBaseState(StatesGroup):
    choosing_category = State()
    viewing_content = State()
    adding_content = State()
    adding_title = State()
    adding_text = State()
    adding_category = State()
    setting_permanent = State()
    editing_content = State()

class AdminState(StatesGroup):
    waiting_for_new_user_data = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def setup_database():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        login TEXT UNIQUE,
        password TEXT,
        full_name TEXT,
        role TEXT CHECK(role IN ('student', 'teacher', 'admin')),
        group_name TEXT,
        student_id TEXT,
        is_verified BOOLEAN DEFAULT FALSE
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS pre_registered_users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        login TEXT UNIQUE,
        password TEXT,
        full_name TEXT,
        role TEXT CHECK(role IN ('student', 'teacher', 'admin')),
        group_name TEXT,
        student_id TEXT
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        from_user_id INTEGER,
        to_user_id INTEGER,
        text TEXT,
        timestamp DATETIME,
        is_read BOOLEAN DEFAULT FALSE,
        FOREIGN KEY (from_user_id) REFERENCES users(user_id),
        FOREIGN KEY (to_user_id) REFERENCES users(user_id)
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS knowledge_base (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        content TEXT,
        category TEXT,
        is_permanent BOOLEAN,
        created_at DATETIME,
        updated_at DATETIME,
        author_id INTEGER,
        FOREIGN KEY (author_id) REFERENCES users(user_id)
    )
    ''')

    add_test_users()
    conn.commit()

def add_test_users():
    cursor.execute("SELECT COUNT(*) FROM pre_registered_users")
    if cursor.fetchone()[0] == 0:
        test_users = [
            ('student1', 'pass123', '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', 'student', '–ì—Ä—É–ø–ø–∞ 101', 'ST-001'),
            ('student2', 'pass123', '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á', 'student', '–ì—Ä—É–ø–ø–∞ 101', 'ST-002'),
            ('student3', 'pass123', '–°–µ—Ä–≥–µ–µ–≤ –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á', 'student', '–ì—Ä—É–ø–ø–∞ 102', 'ST-003'),
            ('student4', 'pass123', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', 'student', '–ì—Ä—É–ø–ø–∞ 102', 'ST-004'),
            ('student5', 'pass123', '–ê–Ω–¥—Ä–µ–µ–≤ –ê–Ω–¥—Ä–µ–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á', 'student', '–ì—Ä—É–ø–ø–∞ 103', 'ST-005'),
            ('student6', 'pass123', '–ú–∏—Ö–∞–π–ª–æ–≤ –ú–∏—Ö–∞–∏–ª –ú–∏—Ö–∞–π–ª–æ–≤–∏—á', 'student', '–ì—Ä—É–ø–ø–∞ 103', 'ST-006'),
            ('teacher1', 'pass123', '–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞', 'teacher', None, None),
            ('teacher2', 'pass123', '–ö—É–∑–Ω–µ—Ü–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á', 'teacher', None, None),
            ('teacher3', 'pass123', '–ú–æ—Ä–æ–∑–æ–≤–∞ –Æ–ª–∏—è –î–µ–Ω–∏—Å–æ–≤–Ω–∞', 'teacher', None, None),
            ('teacher4', 'pass123', '–§—ë–¥–æ—Ä–æ–≤ –ì—Ä–∏–≥–æ—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', 'teacher', None, None),
            ('admin1', 'admin123', '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin', None, None),
            ('admin2', 'admin123', '–ì–ª–∞–≤–Ω—ã–π –ü–æ —Ç—É–∞–ª–µ—Ç–∞–º', 'admin', None, None),
            ('admin3', 'admin123', '–ì–ª–∞–≤–Ω—ã–π –ü–æ –∫–æ–¥—É', 'admin', None, None)
        ]

        for user in test_users:
            try:
                cursor.execute(
                    "INSERT INTO pre_registered_users (login, password, full_name, role, group_name, student_id) VALUES (?, ?, ?, ?, ?, ?)",
                    user
                )
            except sqlite3.IntegrityError:
                continue

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def hash_password(password: str) -> str:
    return hashlib.sha256(password.encode()).hexdigest()

def get_user_role(user_id: int) -> str:
    cursor.execute("SELECT role FROM users WHERE user_id = ? AND is_verified = TRUE", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None

def get_user_full_name(user_id: int) -> str:
    cursor.execute("SELECT full_name FROM users WHERE user_id = ? AND is_verified = TRUE", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else "Unknown"

def can_send_message(sender_id: int, recipient_id: int) -> bool:
    sender_role = get_user_role(sender_id)
    recipient_role = get_user_role(recipient_id)
    
    if not sender_role or not recipient_role:
        return False
        
    if sender_role == "admin":
        return True
    elif sender_role == "teacher":
        return recipient_role in ["student", "teacher", "admin"]
    elif sender_role == "student":
        return recipient_role == "teacher"
    return False

def get_last_message_time(user_id: int) -> datetime:
    cursor.execute("SELECT MAX(timestamp) FROM messages WHERE from_user_id = ?", (user_id,))
    result = cursor.fetchone()
    return datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S') if result and result[0] else None

def can_user_send_message_now(user_id: int) -> bool:
    last_message_time = get_last_message_time(user_id)
    if not last_message_time:
        return True
    return datetime.now() - last_message_time > timedelta(minutes=0)

async def show_main_menu(message: types.Message, user_id: int):
    role = get_user_role(user_id)
    
    builder = ReplyKeyboardBuilder()
    
    if role == "student":
        builder.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
        builder.button(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    elif role == "teacher":
        builder.button(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É")
        builder.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
        builder.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        builder.button(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    elif role == "admin":
        builder.button(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É")
        builder.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
        builder.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        builder.button(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
        builder.button(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    builder.button(text="–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    builder.adjust(2)
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–î–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–∞–ø–∏—à–∏—Ç–µ /–ø–æ–¥—Å–∫–∞–∑–∫–∏",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    cursor.execute("SELECT * FROM users WHERE user_id = ? AND is_verified = TRUE", (user_id,))
    if cursor.fetchone():
        await show_main_menu(message, user_id)
    else:
        builder = ReplyKeyboardBuilder()
        builder.button(text="–í–æ–π—Ç–∏")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

@dp.message(Command("–ø–æ–¥—Å–∫–∞–∑–∫–∏"))
async def show_help(message: types.Message):
    user_id = message.from_user.id
    role = get_user_role(user_id)
    
    help_text = "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
    
    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    help_text += "üîπ –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    help_text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    help_text += "/–ø–æ–¥—Å–∫–∞–∑–∫–∏ - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    help_text += "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é\n\n"
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    if role == "student":
        help_text += "üîπ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n"
        help_text += "–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é\n"
        help_text += "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π - –î–æ—Å—Ç—É–ø –∫ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n\n"
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    elif role == "teacher":
        help_text += "üîπ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n"
        help_text += "–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É\n"
        help_text += "–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–ª–ª–µ–≥–µ\n"
        help_text += "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
        help_text += "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π - –î–æ—Å—Ç—É–ø –∫ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ\n\n"
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    elif role == "admin":
        help_text += "üîπ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        help_text += "–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É\n"
        help_text += "–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é\n"
        help_text += "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–ª–ª–µ–≥–µ\n"
        help_text += "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π - –î–æ—Å—Ç—É–ø –∫ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –∏—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n"
        help_text += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        help_text += "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        help_text += "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        help_text += "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n"
    
    # –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    else:
        help_text += "üîπ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏.\n"
        help_text += "–í–æ–π—Ç–∏ - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞\n\n"
    
    await message.answer(help_text)

@dp.message(F.text == "–í–æ–π—Ç–∏")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω (–∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è):")
    await state.set_state(AuthState.waiting_for_login)

@dp.message(AuthState.waiting_for_login)
async def process_login(message: types.Message, state: FSMContext):
    login = message.text.strip()
    cursor.execute("SELECT * FROM pre_registered_users WHERE login = ?", (login,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.answer("–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data({
        'pre_registered_data': user_data,
        'login': login
    })
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthState.waiting_for_password)

@dp.message(AuthState.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    pre_data = data['pre_registered_data']
    
    if password != pre_data[2]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    if pre_data[4] == 'student':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–∫–∞–∫ –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º –±–∏–ª–µ—Ç–µ):")
        await state.set_state(AuthState.waiting_for_full_name)
    else:
        await complete_registration(message, state)

@dp.message(AuthState.waiting_for_full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    data = await state.get_data()
    
    if full_name.lower() != data['pre_registered_data'][3].lower():
        await message.answer("–§–ò–û –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data({'full_name': full_name})
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:")
    await state.set_state(AuthState.waiting_for_group)

@dp.message(AuthState.waiting_for_group)
async def process_group(message: types.Message, state: FSMContext):
    group = message.text.strip()
    data = await state.get_data()
    
    if group.lower() != data['pre_registered_data'][5].lower():
        await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data({'group_name': group})
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞:")
    await state.set_state(AuthState.waiting_for_student_id)

@dp.message(AuthState.waiting_for_student_id)
async def process_student_id(message: types.Message, state: FSMContext):
    student_id = message.text.strip().upper()
    data = await state.get_data()
    
    if student_id != data['pre_registered_data'][6]:
        await message.answer("–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data({'student_id': student_id})
    await complete_registration(message, state)

async def complete_registration(message: types.Message, state: FSMContext):
    data = await state.get_data()
    pre_data = data['pre_registered_data']
    user_id = message.from_user.id
    
    try:
        cursor.execute(
            "INSERT INTO users (user_id, login, password, full_name, role, group_name, student_id, is_verified) "
            "VALUES (?, ?, ?, ?, ?, ?, ?, TRUE)",
            (
                user_id,
                pre_data[1],
                hash_password(pre_data[2]),
                pre_data[3],
                pre_data[4],
                pre_data[5] if pre_data[4] == 'student' else None,
                pre_data[6] if pre_data[4] == 'student' else None
            )
        )
        conn.commit()
        await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {pre_data[3]}!")
        await show_main_menu(message, user_id)
    except sqlite3.IntegrityError:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message(F.text == "–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
async def logout_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    conn.commit()
    
    await state.clear()
    
    builder = ReplyKeyboardBuilder()
    builder.button(text="–í–æ–π—Ç–∏")
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–Ω–æ–≤–∞.",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text.startswith("–ù–∞–ø–∏—Å–∞—Ç—å"))
async def write_to_user(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    role = get_user_role(user_id)
    
    if not role:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    target = message.text.split()[-1]
    if target == "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é":
        cursor.execute("SELECT user_id, full_name FROM users WHERE role = 'teacher' AND is_verified = TRUE")
    elif target == "—Å—Ç—É–¥–µ–Ω—Ç—É":
        cursor.execute("SELECT user_id, full_name FROM users WHERE role = 'student' AND is_verified = TRUE")
    elif target == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
        cursor.execute("SELECT user_id, full_name FROM users WHERE role = 'admin' AND is_verified = TRUE")
    else:
        return
    
    users = cursor.fetchall()
    if not users:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    builder = InlineKeyboardBuilder()
    for user in users:
        builder.button(text=user[1], callback_data=f"select_recipient_{user[0]}")
    builder.adjust(1)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=builder.as_markup())
    await state.set_state(MessageState.waiting_for_recipient)

@dp.callback_query(F.data.startswith("select_recipient_"), MessageState.waiting_for_recipient)
async def select_recipient(callback: types.CallbackQuery, state: FSMContext):
    recipient_id = int(callback.data.split("_")[2])
    await state.update_data(recipient_id=recipient_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(MessageState.waiting_for_message_text)
    await callback.answer()

@dp.message(MessageState.waiting_for_message_text)
async def process_message_text(message: types.Message, state: FSMContext):
    if not can_user_send_message_now(message.from_user.id):
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ 30 –º–∏–Ω—É—Ç.")
        await state.clear()
        return
    
    await state.update_data(message_text=message.text)
    data = await state.get_data()
    
    recipient_name = get_user_full_name(data['recipient_id'])
    sender_name = get_user_full_name(message.from_user.id)
    role = get_user_role(message.from_user.id)
    group = cursor.execute(
        "SELECT group_name FROM users WHERE user_id = ?", 
        (message.from_user.id,)
    ).fetchone()[0] if role == "student" else None
    
    preview = f"üîπ {sender_name} ({role.capitalize()}"
    if group:
        preview += f", –ì—Ä—É–ø–ø–∞ {group}"
    preview += f"\n   {data['message_text']}\n"
    preview += f"üïí {datetime.now().strftime('%H:%M, %d.%m.%Y')}"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send")
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_send")
    
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:\n\n{preview}", reply_markup=builder.as_markup())
    await state.set_state(MessageState.waiting_for_confirmation)

@dp.callback_query(F.data == "confirm_send", MessageState.waiting_for_confirmation)
async def confirm_send(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sender_id = callback.from_user.id
    recipient_id = data['recipient_id']
    message_text = data['message_text']
    
    if not can_send_message(sender_id, recipient_id):
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await state.clear()
        return
    
    cursor.execute(
        "INSERT INTO messages (from_user_id, to_user_id, text, timestamp) VALUES (?, ?, ?, ?)",
        (sender_id, recipient_id, message_text, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    )
    conn.commit()
    
    sender_name = get_user_full_name(sender_id)
    sender_role = get_user_role(sender_id)
    sender_group = cursor.execute(
        "SELECT group_name FROM users WHERE user_id = ?", 
        (sender_id,)
    ).fetchone()[0] if sender_role == "student" else None
    
    msg_to_recipient = f"üîπ {sender_name} ({sender_role.capitalize()}"
    if sender_group:
        msg_to_recipient += f", –ì—Ä—É–ø–ø–∞ {sender_group}"
    msg_to_recipient += f")\n   {message_text}\n"
    msg_to_recipient += f"üïí {datetime.now().strftime('%H:%M, %d.%m.%Y')}"
    
    try:
        await bot.send_message(recipient_id, msg_to_recipient)
    except Exception as e:
        logger.error(f"Failed to send message to {recipient_id}: {e}")
    
    await callback.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "cancel_send", MessageState.waiting_for_confirmation)
async def cancel_send(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
@dp.message(F.text == "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
async def knowledge_base_menu(message: types.Message, state: FSMContext):
    user_role = get_user_role(message.from_user.id)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìö –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="kb_permanent")
    builder.button(text="üìå –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="kb_temporary")
    
    if user_role in ["teacher", "admin"]:
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="kb_add")
        builder.button(text="‚úèÔ∏è –ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="kb_my")
    
    builder.adjust(1)
    await message.answer("üìñ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:", reply_markup=builder.as_markup())
    await state.set_state(KnowledgeBaseState.choosing_category)

@dp.callback_query(F.data.startswith("kb_"), KnowledgeBaseState.choosing_category)
async def process_kb_category(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    user_id = callback.from_user.id

    if action == "back":
        await knowledge_base_menu(callback.message, state)
        await callback.answer()
        return
        
    if action == "permanent":
        cursor.execute("""
            SELECT id, title FROM knowledge_base 
            WHERE is_permanent = 1 
            ORDER BY title
        """)
        materials = cursor.fetchall()
        title = "üìö –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        
    elif action == "temporary":
        cursor.execute("""
            SELECT id, title FROM knowledge_base 
            WHERE is_permanent = 0 
            ORDER BY created_at DESC
        """)
        materials = cursor.fetchall()
        title = "üìå –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        
    elif action == "my":
        cursor.execute("""
            SELECT id, title FROM knowledge_base 
            WHERE author_id = ?
            ORDER BY created_at DESC
        """, (user_id,))
        materials = cursor.fetchall()
        title = "‚úèÔ∏è –ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        
    elif action == "add":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
        await state.set_state(KnowledgeBaseState.adding_title)
        await callback.answer()
        return
    
    if not materials:
        await callback.message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for material in materials:
        builder.button(text=material[1], callback_data=f"material_{material[0]}")
    builder.adjust(1)
    
    await callback.message.answer(title, reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await show_main_menu(callback.message, callback.from_user.id)
    await state.clear()
    await callback.answer()

@dp.message(KnowledgeBaseState.adding_title)
async def process_add_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    await state.set_state(KnowledgeBaseState.adding_text)

@dp.message(KnowledgeBaseState.adding_text)
async def process_add_text(message: types.Message, state: FSMContext):
    await state.update_data(content=message.text)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="category_study")
    builder.button(text="–ú–µ—Ç–æ–¥–∏—á–∫–∏", callback_data="category_methods")
    builder.button(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="category_schedule")
    builder.button(text="–î—Ä—É–≥–æ–µ", callback_data="category_other")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())
    await state.set_state(KnowledgeBaseState.adding_category)

@dp.callback_query(F.data.startswith("category_"), KnowledgeBaseState.adding_category)
async def process_add_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(category=category)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="permanent_1")
    builder.button(text="–í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="permanent_0")
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=builder.as_markup())
    await state.set_state(KnowledgeBaseState.setting_permanent)
    await callback.answer()

@dp.callback_query(F.data.startswith("permanent_"), KnowledgeBaseState.setting_permanent)
async def process_set_permanent(callback: types.CallbackQuery, state: FSMContext):
    is_permanent = bool(int(callback.data.split("_")[1]))
    user_data = await state.get_data()
    user_id = callback.from_user.id
    
    cursor.execute("""
        INSERT INTO knowledge_base 
        (title, content, category, is_permanent, created_at, updated_at, author_id)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (
        user_data['title'],
        user_data['content'],
        user_data['category'],
        is_permanent,
        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        user_id
    ))
    conn.commit()
    
    await callback.message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data.startswith("material_"))
async def view_material(callback: types.CallbackQuery, state: FSMContext):
    material_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    cursor.execute("""
        SELECT title, content, category, is_permanent, created_at, author_id 
        FROM knowledge_base 
        WHERE id = ?
    """, (material_id,))
    material = cursor.fetchone()
    
    if not material:
        await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    title, content, category, is_permanent, created_at, author_id = material
    author_name = get_user_full_name(author_id)
    
    text = f"<b>{title}</b>\n\n"
    text += f"{content}\n\n"
    text += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
    text += f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n"
    text += f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n"
    text += "üîí –¢–∏–ø: " + ("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π" if is_permanent else "–í—Ä–µ–º–µ–Ω–Ω—ã–π")
    
    builder = InlineKeyboardBuilder()
    
    if user_id == author_id or get_user_role(user_id) == "admin":
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{material_id}")
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{material_id}")
        builder.adjust(2)
    
    builder.button(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_"))
async def edit_material(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    material_id = int(parts[-1])
    user_id = callback.from_user.id
    
    cursor.execute("SELECT author_id FROM knowledge_base WHERE id = ?", (material_id,))
    result = cursor.fetchone()
    
    if not result or (user_id != result[0] and get_user_role(user_id) != "admin"):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return
    
    if len(parts) == 2:
        builder = InlineKeyboardBuilder()
        builder.button(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{material_id}")
        builder.button(text="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data=f"edit_content_{material_id}")
        builder.button(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"edit_category_{material_id}")
        builder.button(text="–¢–∏–ø", callback_data=f"edit_permanent_{material_id}")
        builder.adjust(2)
        
        await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=builder.as_markup())
        await callback.answer()
        return
    
    field = parts[1]
    await state.update_data(
        edit_field=field,
        material_id=material_id
    )
    
    if field == 'permanent':
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π", callback_data="permanent_1")
        builder.button(text="–í—Ä–µ–º–µ–Ω–Ω—ã–π", callback_data="permanent_0")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=builder.as_markup())
    elif field == 'category':
        builder = InlineKeyboardBuilder()
        builder.button(text="–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="category_study")
        builder.button(text="–ú–µ—Ç–æ–¥–∏—á–∫–∏", callback_data="category_methods")
        builder.button(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="category_schedule")
        builder.button(text="–î—Ä—É–≥–æ–µ", callback_data="category_other")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())
    else:
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")
        await state.set_state(KnowledgeBaseState.editing_content)
    
    await callback.answer()

@dp.message(KnowledgeBaseState.editing_content)
async def save_edited_material(message: types.Message, state: FSMContext):
    data = await state.get_data()
    material_id = data['material_id']
    field = data['edit_field']
    new_value = message.text
    
    cursor.execute(f"""
        UPDATE knowledge_base 
        SET {field} = ?, updated_at = ?
        WHERE id = ?
    """, (
        new_value,
        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        material_id
    ))
    conn.commit()
    
    await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await state.clear()

@dp.callback_query(F.data.startswith(("category_", "permanent_")))
async def save_selected_option(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    material_id = data['material_id']
    field = data['edit_field']
    
    if callback.data.startswith("category_"):
        new_value = callback.data.split("_")[1]
    else:
        new_value = int(callback.data.split("_")[1])
    
    cursor.execute(f"""
        UPDATE knowledge_base 
        SET {field} = ?, updated_at = ?
        WHERE id = ?
    """, (
        new_value,
        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        material_id
    ))
    conn.commit()
    
    await callback.message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_"))
async def delete_material(callback: types.CallbackQuery):
    material_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    cursor.execute("SELECT author_id FROM knowledge_base WHERE id = ?", (material_id,))
    result = cursor.fetchone()
    
    if not result or (user_id != result[0] and get_user_role(user_id) != "admin"):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return
    
    cursor.execute("DELETE FROM knowledge_base WHERE id = ?", (material_id,))
    conn.commit()
    
    await callback.message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω!")
    await callback.answer()
    await callback.message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(F.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def admin_panel(message: types.Message):
    if get_user_role(message.from_user.id) != "admin":
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    builder = ReplyKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    builder.button(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    builder.button(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    builder.button(text="–ù–∞–∑–∞–¥")
    builder.adjust(2)
    
    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def drop_user_button(message: types.Message, state: FSMContext):
    if get_user_role(message.from_user.id) != "admin":
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    
    builder = ReplyKeyboardBuilder()
    builder.button(text="–í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    drop_users_list.append(message.chat.id)

@dp.message()
async def drop_user(message: Message, bot: Bot):
    if message.chat.id in drop_users_list:
        if message.text == "–í—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            drop_users_list.remove(message.chat.id)
            await message.answer("–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
            
        cursor.execute('SELECT * FROM pre_registered_users WHERE id=?', (message.text,))
        info = cursor.fetchall()
        if not info:
            await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
            
        cursor.execute('DELETE FROM pre_registered_users WHERE id=?', (message.text,))
        conn.commit()
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
        drop_users_list.remove(message.chat.id)

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_users_command(message: types.Message):
    if get_user_role(message.from_user.id) != "admin":
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    cursor.execute("""
        SELECT full_name, role, group_name, is_verified 
        FROM users 
        ORDER BY role, full_name
    """)
    users = cursor.fetchall()
    
    if not users:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    response = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        full_name, role, group, is_verified = user
        verified_status = "‚úÖ" if is_verified else "‚ùå"
        user_info = f"{full_name} ({role.capitalize()}) {verified_status}"
        if role == "student" and group:
            user_info += f", –ì—Ä—É–ø–ø–∞: {group}"
        response += user_info + "\n"
    
    await message.answer(response)

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_main_menu_from_admin(message: types.Message):
    await show_main_menu(message, message.from_user.id)

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def add_user_command(message: types.Message, state: FSMContext):
    if get_user_role(message.from_user.id) != "admin":
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–õ–æ–≥–∏–Ω, –ü–∞—Ä–æ–ª—å, –§–ò–û, –†–æ–ª—å(student/teacher/admin), –ì—Ä—É–ø–ø–∞(–µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç), –ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ(–µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "ivanov, pass123, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, student, –ì—Ä—É–ø–ø–∞ 101, ST-001"
    )
    await state.set_state(AdminState.waiting_for_new_user_data)

@dp.message(AdminState.waiting_for_new_user_data)
async def process_new_user_data(message: types.Message, state: FSMContext):
    try:
        parts = [p.strip() for p in message.text.split(',')]
        if len(parts) not in [4, 6]:
            raise ValueError
        
        login, password, full_name, role = parts[:4]
        group_name = parts[4] if len(parts) > 4 else None
        student_id = parts[5] if len(parts) > 5 else None
        
        if role not in ['student', 'teacher', 'admin']:
            raise ValueError
        
        if role == 'student' and (not group_name or not student_id):
            raise ValueError
        
        cursor.execute(
            "INSERT INTO pre_registered_users (login, password, full_name, role, group_name, student_id) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (login, password, full_name, role, group_name, student_id)
        )
        conn.commit()
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"Error adding user: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    setup_database()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
