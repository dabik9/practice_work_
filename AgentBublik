import logging
import sqlite3
import hashlib
import asyncio
import re
from datetime import datetime, timedelta
from typing import Optional
from html import escape

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="7014679556:AAGPqYwhEIQ7jD7uhidFQg4GwfV2pCEOo88")
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π timeout –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
def get_db_connection():
    conn = sqlite3.connect('New db education.db', check_same_thread=False, timeout=10)
    conn.execute("PRAGMA foreign_keys = ON")  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    return conn

conn = get_db_connection()
cursor = conn.cursor()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class AuthState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()
    waiting_for_full_name = State()
    waiting_for_group = State()
    waiting_for_student_id = State()

class MessageState(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_message_text = State()
    waiting_for_confirmation = State()

class ScheduleState(StatesGroup):
    waiting_for_start_time = State()
    waiting_for_end_time = State()

class KnowledgeBaseState(StatesGroup):
    choosing_category = State()
    adding_title = State()
    adding_text = State()
    adding_category = State()
    setting_permanent = State()
    editing_content = State()
    editing_title = State()
    editing_text = State()
    editing_category = State()
    confirming_edit = State()

class AdminState(StatesGroup):
    waiting_for_new_user_data = State()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def hash_password(password: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª–µ–π"""
    salt = "s3cr3t_s4lt"
    return hashlib.sha256((password + salt).encode()).hexdigest()

def validate_login(login: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    return bool(re.match(r'^[a-zA-Z0-9_\-]{3,20}$', login))

def validate_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    return bool(re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\- ]{2,50}$', name))

def validate_group(group: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    return bool(re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\- ]{2,20}$', group))

def validate_student_id(student_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ"""
    return student_id.isdigit() and len(student_id) == 8

def get_user_role(user_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        cursor.execute(
            "SELECT role FROM users WHERE user_id = ? AND is_verified = TRUE",
            (user_id,)
        )
        row = cursor.fetchone()
        return row[0] if row else None
    except sqlite3.Error as e:
        logger.error(f"Database error in get_user_role: {e}")
        return None

def get_user_full_name(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞"""
    try:
        cursor.execute(
            "SELECT full_name FROM users WHERE user_id = ? AND is_verified = TRUE",
            (user_id,)
        )
        row = cursor.fetchone()
        return escape(row[0]) if row else "Unknown"
    except sqlite3.Error as e:
        logger.error(f"Database error in get_user_full_name: {e}")
        return "Unknown"

def can_send_message(sender: int, recipient: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        sender_role = get_user_role(sender)
        recipient_role = get_user_role(recipient)
        if not sender_role or not recipient_role:
            return False
        
        cursor.execute(
            "SELECT start_time, end_time FROM message_schedule WHERE user_id = ?",
            (recipient,)
        )
        sch = cursor.fetchone()
        
        if sch:
            now = datetime.now().time()
            start = datetime.strptime(sch[0], "%H:%M").time()
            end = datetime.strptime(sch[1], "%H:%M").time()
            if not (start <= now <= end):
                return False
        
        if sender_role == "admin":
            return True
        if sender_role == "teacher":
            return recipient_role in ("teacher", "student", "admin")
        if sender_role == "student":
            return recipient_role == "teacher"
        return False
    except (sqlite3.Error, ValueError) as e:
        logger.error(f"Error in can_send_message: {e}")
        return False

def get_last_message_time(user_id: int) -> Optional[datetime]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        cursor.execute(
            "SELECT MAX(timestamp) FROM messages WHERE from_user_id = ?",
            (user_id,)
        )
        row = cursor.fetchone()
        if row and row[0]:
            return datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
        return None
    except sqlite3.Error as e:
        logger.error(f"Database error in get_last_message_time: {e}")
        return None

def can_user_send_message_now(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    last = get_last_message_time(user_id)
    if not last:
        return True
    return datetime.now() - last > timedelta(minutes=30)

def get_student_groups():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        cursor.execute("SELECT DISTINCT group_name FROM users WHERE role='student' AND is_verified=TRUE")
        return [row[0] for row in cursor.fetchall()]
    except sqlite3.Error as e:
        logger.error(f"Database error in get_student_groups: {e}")
        return []

async def show_main_menu(msg: types.Message, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏"""
    role = get_user_role(user_id)
    if not role:
        return await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
    
    kb = ReplyKeyboardBuilder()
    if role == "student":
        kb.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
        kb.button(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    elif role == "teacher":
        kb.button(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É")
        kb.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
        kb.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        kb.button(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
        kb.button(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞")
    elif role == "admin":
        kb.button(text="–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É")
        kb.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
        kb.button(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        kb.button(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
        kb.button(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
        kb.button(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞")
    
    kb.adjust(2, repeat=True)
    kb.row(types.KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"))
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.as_markup(resize_keyboard=True))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def setup_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                login TEXT UNIQUE,
                password TEXT,
                full_name TEXT,
                role TEXT CHECK(role IN ('student','teacher','admin')),
                group_name TEXT,
                student_id TEXT,
                is_verified BOOLEAN DEFAULT FALSE
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pre_registered_users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                login TEXT UNIQUE,
                password TEXT,
                full_name TEXT,
                role TEXT CHECK(role IN ('student','teacher','admin')),
                group_name TEXT,
                student_id TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                from_user_id INTEGER,
                to_user_id INTEGER,
                text TEXT,
                timestamp DATETIME,
                is_read BOOLEAN DEFAULT FALSE,
                FOREIGN KEY(from_user_id) REFERENCES users(user_id),
                FOREIGN KEY(to_user_id) REFERENCES users(user_id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS knowledge_base (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT,
                content TEXT,
                category TEXT,
                is_permanent BOOLEAN,
                created_at DATETIME,
                updated_at DATETIME,
                author_id INTEGER,
                FOREIGN KEY(author_id) REFERENCES users(user_id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS message_schedule (
                user_id INTEGER PRIMARY KEY,
                start_time TEXT,
                end_time TEXT,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Error initializing database: {e}")
        raise

# /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    try:
        cursor.execute(
            "SELECT 1 FROM users WHERE user_id = ? AND is_verified = TRUE",
            (message.from_user.id,)
        )
        if cursor.fetchone():
            await show_main_menu(message, message.from_user.id)
        else:
            kb = ReplyKeyboardBuilder().button(text="–í–æ–π—Ç–∏")
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.",
                reply_markup=kb.as_markup(resize_keyboard=True)
            )
    except sqlite3.Error as e:
        logger.error(f"Database error in cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í—ã—Ö–æ–¥
@dp.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
async def ask_logout(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞"""
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞, –≤—ã–π—Ç–∏")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    kb.adjust(2)
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=kb.as_markup())
    await state.set_state("confirm_logout")

@dp.message(StateFilter("confirm_logout"), F.text.in_(["‚úÖ –î–∞, –≤—ã–π—Ç–∏","‚ùå –û—Ç–º–µ–Ω–∞"]))
async def handle_logout(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞"""
    if message.text == "‚úÖ –î–∞, –≤—ã–π—Ç–∏":
        try:
            cursor.execute(
                "UPDATE users SET is_verified = FALSE WHERE user_id = ?",
                (message.from_user.id,)
            )
            conn.commit()
            kb = ReplyKeyboardBuilder().button(text="–í–æ–π—Ç–∏")
            await message.answer(
                "–í—ã –≤—ã—à–ª–∏.",
                reply_markup=kb.as_markup(resize_keyboard=True)
            )
        except sqlite3.Error as e:
            logger.error(f"Database error in handle_logout: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.")
    else:
        await message.answer("–û—Ç–º–µ–Ω–∞.")
        await show_main_menu(message, message.from_user.id)
    await state.clear()

# –í—Ö–æ–¥
@dp.message(F.text == "–í–æ–π—Ç–∏")
async def start_login(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞"""
    await message.answer("–õ–æ–≥–∏–Ω:")
    await state.set_state(AuthState.waiting_for_login)

@dp.message(AuthState.waiting_for_login)
async def process_login(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    login = message.text.strip()
    if not validate_login(login):
        return await message.answer("–õ–æ–≥–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.")
    
    try:
        cursor.execute(
            "SELECT * FROM pre_registered_users WHERE login = ?",
            (login,)
        )
        row = cursor.fetchone()
        if not row:
            return await message.answer("–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        await state.update_data(pre_data=row, login=login)
        await message.answer("–ü–∞—Ä–æ–ª—å:")
        await state.set_state(AuthState.waiting_for_password)
    except sqlite3.Error as e:
        logger.error(f"Database error in process_login: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(AuthState.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ)"""
    pwd = message.text.strip()
    data = await state.get_data()
    pre = data['pre_data']
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ –±–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    if pwd != pre[2]:  # –ò–Ω–¥–µ–∫—Å 2 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—é password –≤ pre_registered_users
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    
    if pre[4] == "student":  # –ò–Ω–¥–µ–∫—Å 4 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—é role
        await message.answer("–ü–æ–ª–Ω–æ–µ –§–ò–û:")
        await state.set_state(AuthState.waiting_for_full_name)
    else:
        await complete_registration(message, state)

@dp.message(AuthState.waiting_for_full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    full_name = message.text.strip()
    if not validate_name(full_name):
        return await message.answer("–§–ò–û —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
    
    data = await state.get_data()
    if full_name.lower() != data['pre_data'][3].lower():  # –ò–Ω–¥–µ–∫—Å 3 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—é full_name
        return await message.answer("–§–ò–û –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
    
    await state.update_data(full_name=full_name)
    await message.answer("–ì—Ä—É–ø–ø–∞:")
    await state.set_state(AuthState.waiting_for_group)

@dp.message(AuthState.waiting_for_group)
async def process_group(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    group = message.text.strip()
    if not validate_group(group):
        return await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
    
    data = await state.get_data()
    if group.lower() != data['pre_data'][5].lower():  # –ò–Ω–¥–µ–∫—Å 5 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—é group_name
        return await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
    
    await state.update_data(group=group)
    await message.answer("–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ:")
    await state.set_state(AuthState.waiting_for_student_id)

@dp.message(AuthState.waiting_for_student_id)
async def process_student_id(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ"""
    student_id = message.text.strip().upper()
    if not validate_student_id(student_id):
        return await message.answer("–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 8 —Ü–∏—Ñ—Ä.")
    
    data = await state.get_data()
    if student_id != data['pre_data'][6]:  # –ò–Ω–¥–µ–∫—Å 6 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—é student_id
        return await message.answer("–ù–æ–º–µ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
    
    await complete_registration(message, state)

async def complete_registration(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    pre = data['pre_data']
    uid = message.from_user.id
    
    try:
        cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (uid,))
        exists = cursor.fetchone()
        
        if exists:
            cursor.execute("""
                UPDATE users SET
                  login=?, password=?, full_name=?, role=?,
                  group_name=?, student_id=?, is_verified=TRUE
                WHERE user_id=?
            """, (
                pre[1], pre[2], pre[3], pre[4],
                pre[5] if pre[4]=="student" else None,
                pre[6] if pre[4]=="student" else None,
                uid
            ))
        else:
            cursor.execute("""
                INSERT INTO users
                  (user_id,login,password,full_name,role,group_name,student_id,is_verified)
                VALUES (?,?,?,?,?,?,?,TRUE)
            """, (
                uid, pre[1], pre[2], pre[3], pre[4],
                pre[5] if pre[4]=="student" else None,
                pre[6] if pre[4]=="student" else None
            ))
        
        conn.commit()
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {escape(pre[3])}!")
        await show_main_menu(message, uid)
    except sqlite3.Error as e:
        logger.error(f"Database error in complete_registration: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()


# –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(F.text.startswith("–ù–∞–ø–∏—Å–∞—Ç—å"))
async def write_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    role = get_user_role(message.from_user.id)
    if not role:
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
    
    target = message.text.split()[-1]
    
    try:
        if target == "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é":
            cursor.execute("SELECT user_id, full_name FROM users WHERE role='teacher' AND is_verified=TRUE")
            rows = cursor.fetchall()
            if not rows:
                return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
            
            kb = InlineKeyboardBuilder()
            for uid, name in rows:
                kb.button(text=escape(name), callback_data=f"select_recipient_{uid}")
            kb.adjust(1)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=kb.as_markup())
            await state.set_state(MessageState.waiting_for_recipient)
        
        elif target == "—Å—Ç—É–¥–µ–Ω—Ç—É":
            if role in ("teacher", "admin"):
                groups = get_student_groups()
                if not groups:
                    return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
                
                kb = InlineKeyboardBuilder()
                for group in groups:
                    kb.button(text=f"üë• –ì—Ä—É–ø–ø–∞: {escape(group)}", callback_data=f"select_group_{group}")
                    cursor.execute(
                        "SELECT user_id, full_name FROM users WHERE role='student' AND group_name=? AND is_verified=TRUE", 
                        (group,))
                    for uid, name in cursor.fetchall():
                        kb.button(text=f"üë§ {escape(name)} ({escape(group)})", callback_data=f"select_recipient_{uid}")
                kb.adjust(1)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=kb.as_markup())
                await state.set_state(MessageState.waiting_for_recipient)
            else:
                cursor.execute("SELECT user_id, full_name FROM users WHERE role='teacher' AND is_verified=TRUE")
                rows = cursor.fetchall()
                if not rows:
                    return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
                
                kb = InlineKeyboardBuilder()
                for uid, name in rows:
                    kb.button(text=escape(name), callback_data=f"select_recipient_{uid}")
                kb.adjust(1)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=kb.as_markup())
                await state.set_state(MessageState.waiting_for_recipient)
        
        elif target == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É":
            cursor.execute("SELECT user_id, full_name FROM users WHERE role='admin' AND is_verified=TRUE")
            rows = cursor.fetchall()
            if not rows:
                return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            
            kb = InlineKeyboardBuilder()
            for uid, name in rows:
                kb.button(text=escape(name), callback_data=f"select_recipient_{uid}")
            kb.adjust(1)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", reply_markup=kb.as_markup())
            await state.set_state(MessageState.waiting_for_recipient)
    except sqlite3.Error as e:
        logger.error(f"Database error in write_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data.startswith("select_recipient_"), MessageState.waiting_for_recipient)
async def select_recipient(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        rid = int(callback.data.split("_")[-1])
        await state.update_data(recipient_id=rid)
        await callback.message.answer("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
        await state.set_state(MessageState.waiting_for_message_text)
    except (ValueError, IndexError):
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
    finally:
        await callback.answer()

@dp.callback_query(F.data.startswith("select_group_"), MessageState.waiting_for_recipient)
async def select_group(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        group = callback.data[len("select_group_"):]
        if not validate_group(group):
            await callback.message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
            return
            
        await state.update_data(group_name=group)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {escape(group)}:")
        await state.set_state(MessageState.waiting_for_message_text)
    except Exception as e:
        logger.error(f"Error in select_group: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        await callback.answer()

@dp.message(MessageState.waiting_for_message_text)
async def process_message_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not can_user_send_message_now(message.from_user.id):
        await message.answer("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç.")
        return await state.clear()
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(message.text) > 2000:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(message_text=message.text)
    data = await state.get_data()
    sender = message.from_user.id
    
    preview = (
        f"üîπ {get_user_full_name(sender)} ({get_user_role(sender)})\n"
        f"   {escape(message.text)}\n"
        f"üïí {datetime.now().strftime('%H:%M, %d.%m.%Y')}"
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send")
    kb.button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_send")
    kb.adjust(2)
    
    await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:\n\n{preview}", reply_markup=kb.as_markup())
    await state.set_state(MessageState.waiting_for_confirmation)

@dp.callback_query(F.data == "confirm_send", MessageState.waiting_for_confirmation)
async def confirm_send(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = await state.get_data()
    sender = callback.from_user.id
    text = data['message_text']
    group = data.get('group_name')
    
    try:
        if group:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏–∑ –≥—Ä—É–ø–ø—ã
            cursor.execute(
                "SELECT user_id FROM users WHERE role='student' AND group_name=? AND is_verified=TRUE",
                (group,)
            )
            recipients = [row[0] for row in cursor.fetchall()]
            
            if not recipients:
                await callback.message.answer("–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
                await state.clear()
                return await callback.answer()
            
            success_count = 0
            for recipient in recipients:
                if can_send_message(sender, recipient):
                    cursor.execute(
                        "INSERT INTO messages (from_user_id,to_user_id,text,timestamp) VALUES (?,?,?,?)",
                        (sender, recipient, text, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                    )
                    try:
                        await bot.send_message(
                            recipient,
                            f"üîπ {get_user_full_name(sender)} ({get_user_role(sender)})\n"
                            f"   {escape(text)}\n"
                            f"üïí {datetime.now().strftime('%H:%M, %d.%m.%Y')}"
                        )
                        success_count += 1
                    except Exception as e:
                        logger.error(f"Error sending message to {recipient}: {e}")
            
            conn.commit()
            await callback.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} —Å—Ç—É–¥–µ–Ω—Ç–∞–º!")
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            recipient = data['recipient_id']
            if not can_send_message(sender, recipient):
                await callback.message.answer("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                await state.clear()
                return await callback.answer()
            
            cursor.execute(
                "INSERT INTO messages (from_user_id,to_user_id,text,timestamp) VALUES (?,?,?,?)",
                (sender, recipient, text, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            )
            conn.commit()
            
            try:
                await bot.send_message(
                    recipient,
                    f"üîπ {get_user_full_name(sender)} ({get_user_role(sender)})\n"
                    f"   {escape(text)}\n"
                    f"üïí {datetime.now().strftime('%H:%M, %d.%m.%Y')}"
                )
                await callback.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                logger.error(f"Error sending message: {e}")
                await callback.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
    except sqlite3.Error as e:
        logger.error(f"Database error in confirm_send: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    finally:
        await state.clear()
        await callback.answer()

@dp.callback_query(F.data == "cancel_send", MessageState.waiting_for_confirmation)
async def cancel_send(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
@dp.message(F.text == "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
async def kb_menu(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="kb_permanent")
    kb.button(text="–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="kb_temporary")
    
    if get_user_role(message.from_user.id) in ("teacher","admin"):
        kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="kb_add")
    
    kb.adjust(1)
    await message.answer("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:", reply_markup=kb.as_markup())
    await state.set_state(KnowledgeBaseState.choosing_category)

@dp.callback_query(F.data.startswith("kb_"), KnowledgeBaseState.choosing_category)
async def process_kb_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    action = callback.data.split("_")[1]
    uid = callback.from_user.id
    
    if action == "add":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
        await state.set_state(KnowledgeBaseState.adding_title)
        return await callback.answer()
    
    try:
        if action == "permanent":
            cursor.execute("SELECT id,title FROM knowledge_base WHERE is_permanent=1 ORDER BY title")
            title = "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:"
        else:
            cursor.execute("SELECT id,title FROM knowledge_base WHERE is_permanent=0 ORDER BY created_at DESC")
            title = "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:"
        
        rows = cursor.fetchall()
        if not rows:
            await callback.message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return await callback.answer()
        
        kb = InlineKeyboardBuilder()
        for mid, mt in rows:
            kb.button(text=escape(mt), callback_data=f"material_{mid}")
        kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        kb.adjust(1)
        
        await callback.message.answer(title, reply_markup=kb.as_markup())
    except sqlite3.Error as e:
        logger.error(f"Database error in process_kb_category: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
    finally:
        await callback.answer()

@dp.message(KnowledgeBaseState.adding_title)
async def process_material_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    if len(message.text) > 100:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    await state.set_state(KnowledgeBaseState.adding_text)

@dp.message(KnowledgeBaseState.adding_text)
async def process_material_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    if len(message.text) > 5000:
        await message.answer("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(content=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    await state.set_state(KnowledgeBaseState.adding_category)

@dp.message(KnowledgeBaseState.adding_category)
async def process_material_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    if len(message.text) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(category=message.text)
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π", callback_data="material_permanent_1")
    kb.button(text="–í—Ä–µ–º–µ–Ω–Ω—ã–π", callback_data="material_permanent_0")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=kb.as_markup())
    await state.set_state(KnowledgeBaseState.setting_permanent)

@dp.callback_query(F.data.startswith("material_permanent_"), KnowledgeBaseState.setting_permanent)
async def process_material_permanent(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π/–≤—Ä–µ–º–µ–Ω–Ω—ã–π)"""
    is_permanent = bool(int(callback.data.split("_")[-1]))
    data = await state.get_data()
    
    try:
        cursor.execute(
            "INSERT INTO knowledge_base (title, content, category, is_permanent, created_at, updated_at, author_id) "
            "VALUES (?, ?, ?, ?, ?, ?, ?)",
            (
                data['title'],
                data['content'],
                data['category'],
                is_permanent,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                callback.from_user.id
            )
        )
        conn.commit()
        await callback.message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
    except sqlite3.Error as e:
        logger.error(f"Database error in process_material_permanent: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
    finally:
        await state.clear()
        await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@dp.callback_query(F.data.startswith("material_"))
async def view_material(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        mid = int(callback.data.split("_")[-1])
        cursor.execute(
            "SELECT title,content,category,is_permanent,created_at,author_id FROM knowledge_base WHERE id=?",
            (mid,)
        )
        m = cursor.fetchone()
        
        if not m:
            return await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        title, content, cat, perm, created, aid = m
        role = get_user_role(callback.from_user.id)
        can_edit = role == "admin" or (callback.from_user.id == aid and role == "teacher")
        
        text = (
            f"<b>{escape(title)}</b>\n\n{escape(content)}\n\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {escape(cat)}\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created}\n"
            f"üîí –¢–∏–ø: {'–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π' if perm else '–í—Ä–µ–º–µ–Ω–Ω—ã–π'}"
        )
        
        kb = InlineKeyboardBuilder()
        if can_edit:
            kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=f"edit_material_{mid}")
            kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=f"delete_material_{mid}")
        else:
            kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        kb.adjust(1)
        
        await callback.message.answer(text, parse_mode="HTML", reply_markup=kb.as_markup())
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    except sqlite3.Error as e:
        logger.error(f"Database error in view_material: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    finally:
        await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@dp.callback_query(F.data.startswith("edit_material_"))
async def edit_material_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        material_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –ë–î
        cursor.execute(
            "SELECT title, content, category, author_id FROM knowledge_base WHERE id=?",
            (material_id,)
        )
        material = cursor.fetchone()
        
        if not material:
            await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        title, content, category, author_id = material
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        user_role = get_user_role(callback.from_user.id)
        if user_role != "admin" and (callback.from_user.id != author_id or user_role != "teacher"):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            material_id=material_id,
            title=title,
            content=content,
            category=category
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await callback.message.answer(
            f"–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:\n{escape(title)}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—Ç –∂–µ:"
        )
        await state.set_state(KnowledgeBaseState.editing_title)
        
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    finally:
        await callback.answer()

@dp.message(KnowledgeBaseState.editing_title)
async def edit_material_title(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    if len(message.text) > 100:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=message.text)
    data = await state.get_data()
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{escape(data['content'])}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ –∂–µ:"
    )
    await state.set_state(KnowledgeBaseState.editing_text)

@dp.message(KnowledgeBaseState.editing_text)
async def edit_material_text(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    if len(message.text) > 5000:
        await message.answer("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(content=message.text)
    data = await state.get_data()
    await message.answer(
        f"–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:\n{escape(data['category'])}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—É –∂–µ:"
    )
    await state.set_state(KnowledgeBaseState.editing_category)

@dp.message(KnowledgeBaseState.editing_category)
async def edit_material_category(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    if len(message.text) > 50:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(category=message.text)
    data = await state.get_data()
    
    preview = (
        "<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>\n\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {escape(data['title'])}\n"
        f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {escape(data['content'])}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {escape(data['category'])}"
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="save_material_edit")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_material_edit")
    kb.adjust(2)
    
    await message.answer(preview, parse_mode="HTML", reply_markup=kb.as_markup())
    await state.set_state(KnowledgeBaseState.confirming_edit)

@dp.callback_query(F.data == "save_material_edit", KnowledgeBaseState.confirming_edit)
async def save_material_edit(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    data = await state.get_data()
    mid = data['material_id']
    title = data['title']
    content = data['content']
    category = data['category']
    updated_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    try:
        cursor.execute(
            "UPDATE knowledge_base SET title=?, content=?, category=?, updated_at=? WHERE id=?",
            (title, content, category, updated_at, mid)
        )
        conn.commit()
        await callback.message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except sqlite3.Error as e:
        logger.error(f"Database error in save_material_edit: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    finally:
        await state.clear()
        await callback.answer()

@dp.callback_query(F.data == "cancel_material_edit", KnowledgeBaseState.confirming_edit)
async def cancel_material_edit(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    await callback.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@dp.callback_query(F.data.startswith("delete_material_"))
async def delete_material(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    try:
        mid = int(callback.data.split("_")[-1])
        cursor.execute(
            "SELECT author_id FROM knowledge_base WHERE id=?",
            (mid,)
        )
        row = cursor.fetchone()
        
        if not row:
            return await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        author_id = row[0]
        role = get_user_role(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        if role != "admin" and (callback.from_user.id != author_id or role != "teacher"):
            return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{mid}")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{mid}")
        kb.adjust(2)
        
        await callback.message.answer(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª?",
            reply_markup=kb.as_markup()
        )
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    except sqlite3.Error as e:
        logger.error(f"Database error in delete_material: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_material(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    try:
        mid = int(callback.data.split("_")[-1])
        cursor.execute(
            "SELECT author_id FROM knowledge_base WHERE id=?",
            (mid,)
        )
        row = cursor.fetchone()
        
        if not row:
            return await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        author_id = row[0]
        role = get_user_role(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        if role != "admin" and (callback.from_user.id != author_id or role != "teacher"):
            return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        cursor.execute(
            "DELETE FROM knowledge_base WHERE id=?",
            (mid,)
        )
        conn.commit()
        await callback.message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    except sqlite3.Error as e:
        logger.error(f"Database error in confirm_delete_material: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
    finally:
        await callback.answer()

@dp.callback_query(F.data.startswith("cancel_delete_"))
async def cancel_delete_material(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
@dp.message(F.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def admin_panel(message: types.Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if get_user_role(message.from_user.id) != "admin":
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
    
    kb = ReplyKeyboardBuilder()
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    kb.button(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    kb.button(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    kb.button(text="–ù–∞–∑–∞–¥")
    kb.adjust(2, 2)
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.as_markup(resize_keyboard=True))

@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def delete_user_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if get_user_role(message.from_user.id) != "admin":
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
    
    try:
        cursor.execute("SELECT user_id, full_name, role FROM users ORDER BY full_name")
        users = cursor.fetchall()
        
        if not users:
            return await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        
        kb = InlineKeyboardBuilder()
        for user_id, full_name, role in users:
            kb.button(text=f"{escape(full_name)} ({role})", callback_data=f"delete_user_{user_id}")
        kb.adjust(1)
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())
    except sqlite3.Error as e:
        logger.error(f"Database error in delete_user_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
@dp.callback_query(F.data.startswith("delete_user_"))
async def select_user_to_delete(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(callback.data.split("_")[-1])
        
        cursor.execute(
            "SELECT full_name, role FROM users WHERE user_id = ?",
            (user_id,)
        )
        user = cursor.fetchone()
        
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        full_name, role = user
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_user_delete_{user_id}")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_user_delete")
        kb.adjust(2)
        
        await callback.message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {escape(full_name)} ({role})?",
            reply_markup=kb.as_markup()
        )
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except sqlite3.Error as e:
        logger.error(f"Database error in select_user_to_delete: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(message, message.from_user.id)

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (callback)"""
    await show_main_menu(callback.message, callback.from_user.id)
    await callback.answer()

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_users(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if get_user_role(message.from_user.id) != "admin":
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
    
    try:
        cursor.execute("SELECT full_name,role,group_name,is_verified FROM users ORDER BY role,full_name")
        rows = cursor.fetchall()
        txt = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        
        for fn, r, g, v in rows:
            status = "‚úÖ" if v else "‚ùå"
            txt += f"{escape(fn)} ({r}) {status}"
            if r == "student" and g:
                txt += f", {escape(g)}"
            txt += "\n"
        
        await message.answer(txt)
    except sqlite3.Error as e:
        logger.error(f"Database error in list_users: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def add_user(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if get_user_role(message.from_user.id) != "admin":
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "login,password,–§–ò–û,role,group(–µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç),student_id(–µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "ivanov,12345,–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á,student,–ò–í–¢-21,12345678"
    )
    await state.set_state(AdminState.waiting_for_new_user_data)
@dp.callback_query(F.data.startswith("confirm_user_delete_"))
async def confirm_user_delete(callback: types.CallbackQuery):
    """–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(callback.data.split("_")[-1])
        
        cursor.execute(
            "SELECT full_name FROM users WHERE user_id = ?",
            (user_id,)
        )
        user = cursor.fetchone()
        
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        full_name = user[0]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        cursor.execute("DELETE FROM pre_registered_users WHERE login = (SELECT login FROM users WHERE user_id = ?)", (user_id,))
        conn.commit()
        
        await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {escape(full_name)} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except sqlite3.Error as e:
        logger.error(f"Database error in confirm_user_delete: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    finally:
        await callback.answer()

@dp.callback_query(F.data == "cancel_user_delete")
async def cancel_user_delete(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

    
@dp.message(AdminState.waiting_for_new_user_data)
async def process_new_user(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        parts = [p.strip() for p in message.text.split(',')]
        if len(parts) < 4:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not validate_login(parts[0]):
            return await message.answer("–õ–æ–≥–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        
        if not validate_name(parts[2]):
            return await message.answer("–§–ò–û —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
        
        if parts[3] not in ("student","teacher","admin"):
            return await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        
        if parts[3] == "student":
            if len(parts) < 6:
                return await message.answer("–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ.")
            
            if not validate_group(parts[4]):
                return await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.")
            
            if not validate_student_id(parts[5]):
                return await message.answer("–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 8 —Ü–∏—Ñ—Ä.")
            
            grp = parts[4]
            sid = parts[5]
        else:
            grp = None
            sid = None
        
        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        hashed_pwd = hash_password(parts[1])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "INSERT INTO pre_registered_users (login,password,full_name,role,group_name,student_id) VALUES (?,?,?,?,?,?)",
            (parts[0], hashed_pwd, parts[2], parts[3], grp, sid)
        )
        conn.commit()
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except ValueError as e:
        logger.error(f"Validation error in process_new_user: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except sqlite3.Error as e:
        logger.error(f"Database error in process_new_user: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    finally:
        await state.clear()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞
@dp.message(F.text == "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞")
async def schedule_settings(message: types.Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await state.clear()
    uid = message.from_user.id
    
    try:
        cursor.execute("SELECT start_time,end_time FROM message_schedule WHERE user_id=?", (uid,))
        sch = cursor.fetchone()
        
        text = "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏—ë–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        kb = InlineKeyboardBuilder()
        
        if sch:
            text += f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞: {sch[0]} - {sch[1]}\n\n"
            kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="edit_schedule")
            kb.button(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="remove_schedule")
        else:
            text += "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –Ω–µ—Ç.\n"
            kb.button(text="‚ûï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="set_schedule")
        
        kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        kb.adjust(1)
        await message.answer(text, reply_markup=kb.as_markup())
    except sqlite3.Error as e:
        logger.error(f"Database error in schedule_settings: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

@dp.callback_query(F.data.in_(["set_schedule","edit_schedule"]))
async def start_time_setup(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞"""
    uid = callback.from_user.id
    
    try:
        cursor.execute("SELECT start_time,end_time FROM message_schedule WHERE user_id=?", (uid,))
        cur = cursor.fetchone()
        
        if cur:
            await state.update_data(cur_start=cur[0], cur_end=cur[1])
        
        kb = InlineKeyboardBuilder()
        if cur:
            kb.button(text=f"–¢–µ–∫—É—â–µ–µ: {cur[0]}", callback_data="use_current_start")
        
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):",
            reply_markup=kb.as_markup() if cur else None
        )
        await state.set_state(ScheduleState.waiting_for_start_time)
    except sqlite3.Error as e:
        logger.error(f"Database error in start_time_setup: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        await callback.answer()

@dp.callback_query(F.data == "use_current_start", ScheduleState.waiting_for_start_time)
async def use_cur_start(callback: types.CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    data = await state.get_data()
    await state.update_data(new_start=data['cur_start'])
    
    kb = InlineKeyboardBuilder()
    if 'cur_end' in data:
        kb.button(text=f"–¢–µ–∫—É—â–µ–µ: {data['cur_end']}", callback_data="use_current_end")
    
    await callback.message.answer(
        f"–ù–∞—á–∞–ª–æ: {data['cur_start']}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:",
        reply_markup=kb.as_markup() if 'cur_end' in data else None
    )
    await state.set_state(ScheduleState.waiting_for_end_time)
    await callback.answer()

@dp.callback_query(F.data == "use_current_end", ScheduleState.waiting_for_end_time)
async def use_cur_end(callback: types.CallbackQuery, state: FSMContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    data = await state.get_data()
    start = data.get('new_start', data['cur_start'])
    end = data['cur_end']
    await save_schedule(callback.message, start, end, callback.from_user.id)
    await state.clear()
    await callback.answer()

@dp.message(ScheduleState.waiting_for_start_time)
async def process_start_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(message.text, "%H:%M")
        await state.update_data(new_start=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        await state.set_state(ScheduleState.waiting_for_end_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00)")

@dp.message(ScheduleState.waiting_for_end_time)
async def process_end_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(message.text, "%H:%M")
        data = await state.get_data()
        start = data['new_start']
        end = message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        if datetime.strptime(end, "%H:%M") <= datetime.strptime(start, "%H:%M"):
            return await message.answer("‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.")
        
        await save_schedule(message, start, end, message.from_user.id)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00)")

async def save_schedule(msg: types.Message, start: str, end: str, uid: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞"""
    try:
        cursor.execute(
            "INSERT OR REPLACE INTO message_schedule (user_id,start_time,end_time) VALUES(?,?,?)",
            (uid, start, end)
        )
        conn.commit()
        await msg.answer(f"‚úÖ –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {start} - {end}")
        await schedule_settings(msg, FSMContext)
    except sqlite3.Error as e:
        logger.error(f"Database error in save_schedule: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

@dp.callback_query(F.data == "remove_schedule")
async def remove_schedule(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞"""
    uid = callback.from_user.id
    
    try:
        cursor.execute("DELETE FROM message_schedule WHERE user_id=?", (uid,))
        conn.commit()
        await callback.message.answer("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω—è—Ç—ã.")
    except sqlite3.Error as e:
        logger.error(f"Database error in remove_schedule: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    finally:
        await schedule_settings(callback.message, FSMContext)
        await callback.answer()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        setup_database()
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        conn.close()

if __name__ == "__main__":
    asyncio.run(main())
